# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestRedfin():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_redfin(self):
    self.driver.get("https://www.redfin.com/")
    self.driver.set_window_size(1920, 1080)
    element = self.driver.find_element(By.CSS_SELECTOR, ".tabSection")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    element = self.driver.find_element(By.ID, "search-box-input")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "search-box-input")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.ID, "search-box-input")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.ID, "search-box-input").click()
    self.driver.find_element(By.CSS_SELECTOR, ".SearchBox:nth-child(1) .search-container > .inline-block > .SvgIcon").click()
    self.driver.find_element(By.ID, "search-box-input").send_keys("dallas,tx")
    self.driver.find_element(By.CSS_SELECTOR, ".quickMinPrice .container").click()
    self.driver.find_element(By.CSS_SELECTOR, ".focus > span").click()
    dropdown = self.driver.find_element(By.NAME, "quickMinPrice")
    dropdown.find_element(By.XPATH, "//option[. = '$300k']").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "#MapHomeCard_0 .HomeCardImage")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".quickMaxPrice .value").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".exposedFiltersSortText")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".focus > span").click()
    dropdown = self.driver.find_element(By.NAME, "quickMaxPrice")
    dropdown.find_element(By.XPATH, "//option[. = '$10M']").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "#MapHomeCard_0 .HomeCardImage")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.execute_script("window.scrollTo(0,174)")
    self.driver.execute_script("window.scrollTo(0,2749)")
    self.driver.find_element(By.LINK_TEXT, "2").click()
    element = self.driver.find_element(By.ID, "download-and-save")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "download-and-save")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.ID, "download-and-save")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.ID, "download-and-save").click()
    self.driver.find_element(By.CSS_SELECTOR, ".h1-tag").click()
    self.driver.find_element(By.CSS_SELECTOR, ".h1-tag").click()
  
